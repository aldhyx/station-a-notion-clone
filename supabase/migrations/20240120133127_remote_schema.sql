create type "public"."FEEDBACK_FEEL" as enum ('TERRIBLE', 'BAD', 'OKAY', 'GOOD', 'AMAZING');

create table "public"."feedback" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default (now() AT TIME ZONE 'utc'::text),
    "feel" "FEEDBACK_FEEL" not null,
    "message" character varying,
    "is_contacted" boolean default false,
    "user_id" uuid not null default auth.uid()
);


alter table "public"."feedback" enable row level security;

CREATE UNIQUE INDEX feedabck_pkey ON public.feedback USING btree (id);

alter table "public"."feedback" add constraint "feedabck_pkey" PRIMARY KEY using index "feedabck_pkey";

grant delete on table "public"."feedback" to "anon";

grant insert on table "public"."feedback" to "anon";

grant references on table "public"."feedback" to "anon";

grant select on table "public"."feedback" to "anon";

grant trigger on table "public"."feedback" to "anon";

grant truncate on table "public"."feedback" to "anon";

grant update on table "public"."feedback" to "anon";

grant delete on table "public"."feedback" to "authenticated";

grant insert on table "public"."feedback" to "authenticated";

grant references on table "public"."feedback" to "authenticated";

grant select on table "public"."feedback" to "authenticated";

grant trigger on table "public"."feedback" to "authenticated";

grant truncate on table "public"."feedback" to "authenticated";

grant update on table "public"."feedback" to "authenticated";

grant delete on table "public"."feedback" to "service_role";

grant insert on table "public"."feedback" to "service_role";

grant references on table "public"."feedback" to "service_role";

grant select on table "public"."feedback" to "service_role";

grant trigger on table "public"."feedback" to "service_role";

grant truncate on table "public"."feedback" to "service_role";

grant update on table "public"."feedback" to "service_role";

create policy "Enable insert for users based on user_id"
on "public"."feedback"
as permissive
for insert
to authenticated
with check ((auth.uid() = user_id));



